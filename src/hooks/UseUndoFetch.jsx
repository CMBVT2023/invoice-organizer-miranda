import axios from "axios";
import { useMutation } from "react-query";
import { appendQueriesParameters } from "../utilities/stringMutations";

/**
 * @component Initializes a custom hook that creates a post request to the backend to undo a past action.
 * @props {string} fetchURLBase - Base URL for the backend server.
 * @props {Dispatch} alterChangeLog - Dispatch function that will be used to update the changelog to indicate if the undo action was successful or failed.
 * @returns {Function & object & boolean} A mutate function to trigger the post request, an error object that contains any error generated by the post request, and an boolean to indicate if the request is loading.
 */
export function UseUndoFetch({ fetchURLBase, alterChangeLog }) {
  //? Initializes the main mutation or post request and pulls the necessary variables from said request.
  //* The necessary variables are the mutateAsync function to trigger the post request, the error object to denote if any errors have occurred, and the isLoading boolean to show if the request is still loading.
  const {
    mutateAsync: triggerFetchPostRequest,
    error,
    isLoading,
  } = useMutation({
    mutationFn: makePostRequest,
    onSuccess: handleSuccessfulTransfer,
  });

  /**
   * @function Triggers the post request to the backend and waits to receive a response and returns the data from said response.
   * @param {object} queries - An object containing the query parameters that will be appended to the end of the backend's base URL.
   * @returns {object} The data obtained from the backend server.
   */
  async function makePostRequest(queries) {
    let fetchURL = appendQueriesParameters(fetchURLBase, queries);
    let response = await axios.post(fetchURL);
    return response.data;
  }

  /**
   * @function Appends the successful transfer data to the changelog.
   * @param {object} transferData - Data that will be added to the changelog.
   * @returns {void}
   */
  function handleSuccessfulTransfer(transferData) {
    //? The response data from the post request is added to the changelog and
    //? if the transfer was successfully undone, the original action is removed from the changelog.
    alterChangeLog((prevChanges) => {
      let changes = [transferData, ...prevChanges];
      if (transferData.result === "Succeeded") {
        changes = changes.filter(
          (change) => change.id != transferData.undoneActionId
        );
      }

      return changes;
    });
  }

  return { triggerFetchPostRequest, errorOccurred: error?.message, isLoading };
}
