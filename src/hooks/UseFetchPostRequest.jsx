import axios from "axios";
import { useMutation, useQueryClient } from "react-query";
import { appendQueriesParameters } from "../utilities/stringMutations";
import { useCookies } from "react-cookie";

/**
 * @component Initializes a custom hooked used to make POST request to the backend.
 * @props {string} fetchURLBase - Base URL to access the backend.
 * @props {Dispatch} alterChangeLog - Dispatch function that will be used to update the changelog to indicate if the undo action was successful or failed.
 * @props {string} associatedFetchKey - React Query fetch key associated with this post request. Once the post request is successful, the associated get request is invalidated and remade.
 * @returns {Function & object & boolean} A mutate function to trigger the post request, an error object that contains any error generated by the post request, and an boolean to indicate if the request is loading.
 */
export function UseFetchPostRequest({
  fetchURLBase,
  alterChangeLog,
  associateFetchKey,
}) {
  // Access the page's stored cookies
  const [cookies] = useCookies("account");

  // Initializes a variable to gain access to the main query client for the project.
  const mainQueryClient = useQueryClient();

  //? Initializes the main mutation or post request and pulls the necessary variables from said request.
  //* The necessary variables are the mutateAsync function to trigger the post request, the error object to denote if any errors have occurred, and the isLoading boolean to show if the request is still loading.
  const {
    mutateAsync: triggerFetchPostRequest,
    error,
    isLoading,
  } = useMutation({
    mutationFn: makePostRequest,
    onSuccess: handleSuccessfulTransfer,
  });

  /**
   * @function Makes a post request to the specified URL and returns the response data received from it.
   * @param {object} queries - All url queries that will be appended to the url.
   * @returns {void}
   */
  async function makePostRequest(queries) {
    const requestHeaders = {
      authorization: `${cookies.account}`,
    };

    let fetchURL = appendQueriesParameters(fetchURLBase, queries);
    let response = await axios({
      method: "post",
      url: fetchURL,
      headers: requestHeaders,
    });
    return response.data;
  }

  /**
   * @function Invalidates the associated query using the query string and appends the post request action to the changelog.
   * @param {object} transferData - All data received by the post request's response.
   * @returns {void}
   */
  function handleSuccessfulTransfer(transferData) {
    //* A check is made to determine if this post request alters data fetched from the server.
    //? If so, the associated query key is invalidated
    //? to trigger said queries to refetch for the updated information
    if (associateFetchKey !== "")
      mainQueryClient.invalidateQueries(associateFetchKey);

    //? Then the response data from the post request is added to the changelog.
    alterChangeLog((prevChanges) => [transferData, ...prevChanges]);
  }

  return { triggerFetchPostRequest, errorOccurred: error?.message, isLoading };
}
