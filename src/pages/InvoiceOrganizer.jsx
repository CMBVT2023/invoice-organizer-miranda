import { NavBar } from "../components/ui/NavBar";
import { ChangeLogIcon } from "../components/ChangeLog/ChangeLogIcon";
import { UserInputs } from "../components/DirectoryDisplay/UserInteraction/UserInputs"
import { DirectoryDisplay } from "../components/DirectoryDisplay/DirectoryDisplay"
import { InvoiceViewer } from "../components/DirectoryDisplay/InvoiceViewer"
import { NewDirectoryModal } from "../components/DirectoryDisplay/UserInteraction/NewDirectoryModal";
import { ChangeLogDisplay } from "../components/ChangeLog/ChangeLogDisplay";
import { Footer } from "../components/ui/Footer";

import { useEffect, useState } from "react";
import { UseFetchPostRequest } from "../hooks/UseFetchPostRequest";

import { ChangeLogStorage } from "../utilities/localStorage";
import { UserSettingsStorage } from "../utilities/localStorage";
import { useSearchParams } from "react-router";

// Pseudo Code
/*  Send two get request to the server
One to get the current state of the customer folder directory.
This get request should return 26 separate arrays of customer names all separated from a-z.
Store these arrays within another array.
One to get the first invoice contained within the invoice folder
Upon receiving the customer folder directory, display a no customer indicator until the user types a name into the filter input.
Disable the user input until the get request is returned.
Once the user starts to enter a name into the filter, take the first character they enter and select the array associated.
Use charCodes so that the first character entered will access the appropriate array via its index within the array.
A = 0, B = 1, C=2 and so on.
As the filter removes non matching names, it should filter from the start of the customer’s name or else filter the name out, even if the filter input is contained within the customer’s name.
If not already done, a default value based on the current year should be set within the year selector, and the user will have the choice to set it as far as ten years back or forwards. 
Once the user finds their customer, they have the choice to select the customer by clicking on their name and then clicking the sort button on the page to send the file to said user’s directory. Else, they can click the button next to the user’s name to quickly send the file to said user’s directory.
To transfer the file, make a post request to the server the provides the current invoice’s path, the customer’s folder path, and the year under which the invoice should be stored.
The client should handle creating the new absolute path string for the invoice so that it can add this action to the Changelog, these will stored by the client and not the server.
The absolute path will be generated by first appending the year to the end of the customer’s folder path before finally appending the invoice’s file name to the end.
Have the post request either resolve with a successful transfer or throw an error to alert the user that the transfer was unsuccessful.
Have an asynchronous function wait for the post request to resolve, and depending on its outcome, convert the file icon within the NavBar element to signify its outcome, have it change to green if successful or red if unsuccessful.
Have the color change revert after like 2 seconds.
Also if the user hovers, display the last change within the Changelog.
Finally, remake the get request only for the next invoice since the customer directories should not be changed. */

export function InvoiceOrganizer() {
    const [ queryParameters, setQueryParameters ] = useSearchParams();

    const [ isUserInteractionDisabled, setIsUserInteractionDisabled ] = useState(true);

    const [ currentInvoice, setCurrentInvoice ] = useState('');
    const [ selectedCustomer, setSelectedCustomer ] = useState('');
    const [ nameFilter, setNameFilter ] = useState('');

    const [ fileTransfer, setFileTransfer ] = useState(null);
    const [ newCustomerFolderName, setNewCustomerFolderName ] = useState(null);
    const [ changeLog, setChangeLog ] = useState(ChangeLogStorage.getStorage());

    const [ showNewDirectoryModal, setShowNewDirectoryModal ] = useState(false);
    const toggleNewDirectoryModal = () => setShowNewDirectoryModal(!showNewDirectoryModal);

    const { isLoading: isNewFolderInitializing, errorOccurred: newFolderError, fetchResponse: folderCreationResult } = UseFetchPostRequest({fetchURLBase: 'http://localhost:3000/createNewFolder', queries: newCustomerFolderName})
    const { isLoading: isTransferring, errorOccurred: fileTransferError, fetchResponse: transferResult } = UseFetchPostRequest({fetchURLBase: 'http://localhost:3000/sortFile', queries: fileTransfer})

    useEffect(() => {
      setIsUserInteractionDisabled(isNewFolderInitializing || isTransferring)
    }, [isTransferring, isNewFolderInitializing])

    useEffect(() => {
      //! If an error occurs for either fetch post attempt, clear the object associate with the action so that the user may attempt to recall their request..
      if (newFolderError) setNewCustomerFolderName(null);
      if (fileTransferError) setFileTransfer(null);
    }, [newFolderError, fileTransferError])

    useEffect(() => {
      //? Checks if a file sort fetch resolved.
      if (transferResult) {
        setChangeLog(prevChanges => [transferResult, ...prevChanges]);
      }
    }, [transferResult])

    useEffect(() => {
      //? Checks if a folderCreation fetch resolved.
      if (folderCreationResult) {
        setChangeLog(prevChanges => [folderCreationResult, ...prevChanges]);
      }
    }, [folderCreationResult])

    useEffect(() => {
      if (changeLog) {
        // Potential change (UserSettingsStorage.getStorage()).changeLogActions to use the userSettings instead
        ChangeLogStorage.setStorage(changeLog, 5)
      }
    }, [changeLog])

    function createFileInfo(e) {
      //? Checks if the event's target contains a valid name property, if so this name is used, otherwise the state value for the selected customer is used.
      //* This is necessary for the quick transfer feature, this allows the selected customer to remain stored in state while still allowing the user to quickly transfer to another customer if they
      //* click the quick transfer button.
      let customerName = e.target.name ? e.target.name : selectedCustomer;
      if (customerName == '' || currentInvoice == '') return;

      // Temporary
      function convertString(name) {
        let regexPattern = /\W+/g;
        return name.replace(regexPattern, '%20')
      }

      let queryString = convertString(customerName);

      setFileTransfer({
        invoiceName: currentInvoice, 
        customerFolderPath: `${queryString[0].toUpperCase()}/${queryString.toUpperCase()}`,
        customerName: queryString.toUpperCase(),
        year: queryParameters.get('year'),
      });
    }

    return (
      <>
        <NavBar PageName={'Invoice Organizer'}>
          <ChangeLogIcon isChanging={isNewFolderInitializing || isTransferring} changeResult={changeLog[0]} />

          <button onClick={createFileInfo} disabled={isUserInteractionDisabled}>Sort</button>
          <button onClick={toggleNewDirectoryModal}>Create Folder</button>
        </NavBar>

        <main> 
          <UserInputs filter={[nameFilter, setNameFilter]} isInteractionDisabled={isUserInteractionDisabled} />

            
          <div>
            <DirectoryDisplay 
                setIsUserInteractionDisabled={setIsUserInteractionDisabled} sortFile={createFileInfo} 
                    nameFilter={nameFilter} setCustomer={setSelectedCustomer} />

            <ChangeLogDisplay changeLog={changeLog} alterChangeLog={setChangeLog} />
          </div>

          <InvoiceViewer setCurrentInvoice={setCurrentInvoice} transferOccurred={transferResult} />

          <NewDirectoryModal showModal={showNewDirectoryModal} toggleNewFolderModal={toggleNewDirectoryModal} newCustomerFolderName={setNewCustomerFolderName} />
        </main>

        {/* Turn these into toast Icons for the bottom right of the screen */}
        {fileTransferError && <h2>{fileTransferError}</h2>}
        {newFolderError && <h2>{newFolderError}</h2>}


        <Footer>
            <button onClick={createFileInfo} disabled={isUserInteractionDisabled} >Sort</button>
            <button onClick={toggleNewDirectoryModal} >Create Folder</button>
        </Footer>
      </>
    )
}